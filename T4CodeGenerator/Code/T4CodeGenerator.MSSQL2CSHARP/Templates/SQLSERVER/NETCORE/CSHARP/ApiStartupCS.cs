// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace T4CodeGenerator.MSSQL2CSHARP.Templates.SQLSERVER.NETCORE.CSHARP
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using T4CodeGenerator.MSSQL2CSHARP.Database;
    using T4CodeGenerator.MSSQL2CSHARP.Helpers;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\ncustodio\source\repos\T4CodeGenerator\T4CodeGenerator.MSSQL2CSHARP\Templates\SQLSERVER\NETCORE\CSHARP\ApiStartupCS.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class ApiStartupCS : ApiStartupCSBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("using System.Text.Json;\r\nusing AutoMapper;\r\nusing Microsoft.AspNetCore.Authentica" +
                    "tion.JwtBearer;\r\nusing Microsoft.AspNetCore.Authorization;\r\nusing Microsoft.AspN" +
                    "etCore.Builder;\r\nusing Microsoft.AspNetCore.Diagnostics;\r\nusing Microsoft.AspNet" +
                    "Core.Hosting;\r\nusing Microsoft.AspNetCore.Http;\r\nusing Microsoft.AspNetCore.Mvc;" +
                    "\r\nusing Microsoft.AspNetCore.Mvc.Authorization;\r\nusing Microsoft.Extensions.Conf" +
                    "iguration;\r\nusing Microsoft.Extensions.DependencyInjection;\r\nusing Microsoft.Ext" +
                    "ensions.Hosting;\r\nusing Api.Extensions;\r\nusing Api.Resources;\r\nusing Core.Servic" +
                    "es;\r\nusing Services;\r\n\r\nnamespace Api\r\n{\r\n    public partial class Startup\r\n    " +
                    "{\r\n        public Startup(IConfiguration configuration)\r\n        {\r\n            " +
                    "Configuration = configuration;\r\n        }\r\n\r\n        public IConfiguration Confi" +
                    "guration { get; }\r\n\r\n        // This method gets called by the runtime. Use this" +
                    " method to add services to the container.\r\n        public void ConfigureServices" +
                    "(IServiceCollection services)\r\n        {\r\n\r\n            services.AddControllers(" +
                    "setupActions =>\r\n            {\r\n                setupActions.ReturnHttpNotAccept" +
                    "able = true;\r\n            })\r\n                .AddXmlDataContractSerializerForma" +
                    "tters()\r\n                .ConfigureApiBehaviorOptions(setupAction =>\r\n          " +
                    "      {\r\n                    setupAction.InvalidModelStateResponseFactory = cont" +
                    "ext =>\r\n                    {\r\n                        return new BadRequestObje" +
                    "ctResult(context.ModelState);\r\n                    };\r\n                });\r\n\r\n  " +
                    "          services.AddRouting(options => options.LowercaseUrls = true);\r\n\r\n     " +
                    "       services.AddMvcCore(x =>\r\n            {\r\n                var authenticate" +
                    "dUserPolicy = new AuthorizationPolicyBuilder(JwtBearerDefaults.AuthenticationSch" +
                    "eme)\r\n                    .RequireAuthenticatedUser()\r\n                    .Buil" +
                    "d();\r\n                x.Filters.Add(new AuthorizeFilter(authenticatedUserPolicy)" +
                    ");\r\n            });\r\n\r\n            services.ConfigureSqlServerl(Configuration);\r" +
                    "\n\r\n            services.ConfigureDependencyServices();\r\n\r\n            AddTransie" +
                    "nts(services);\r\n\r\n            services.ConfigureCors();\r\n\r\n            services." +
                    "ConfigureSwagger();\r\n\r\n            services.ConfigureJwt(Configuration);\r\n\r\n    " +
                    "        services.AddAutoMapper(typeof(Startup));\r\n\r\n        }\r\n\r\n        // This" +
                    " method gets called by the runtime. Use this method to configure the HTTP reques" +
                    "t pipeline.\r\n        public void Configure(IApplicationBuilder app, IWebHostEnvi" +
                    "ronment env)\r\n        {\r\n            if (env.IsDevelopment())\r\n            {\r\n  " +
                    "              app.UseDeveloperExceptionPage();\r\n            }\r\n            else\r" +
                    "\n            {\r\n                app.UseExceptionHandler(config =>\r\n             " +
                    "   {\r\n                    config.Run(async context =>\r\n                    {\r\n  " +
                    "                      context.Response.StatusCode = 500;\r\n                      " +
                    "  context.Response.ContentType = \"application/json\";\r\n\r\n                        " +
                    "var error = context.Features.Get<IExceptionHandlerFeature>();\r\n                 " +
                    "       if (error != null)\r\n                        {\r\n                          " +
                    "  var ex = error.Error;\r\n\r\n                            await context.Response.Wr" +
                    "iteAsync(JsonSerializer.Serialize(new ErrorResource()\r\n                         " +
                    "   {\r\n                                StatusCode = 500,\r\n                       " +
                    "         ErrorMessage = ex.Message\r\n                            }));\r\n          " +
                    "              }\r\n                    });\r\n                });\r\n            }\r\n\r\n" +
                    "            app.UseSwagger();\r\n\r\n            app.UseRouting();\r\n\r\n            ap" +
                    "p.UseCors(\"CorsPolicy\");\r\n\r\n            app.UseAuthentication();\r\n\r\n            " +
                    "app.UseAuthorization();\r\n\r\n            app.UseEndpoints(endpoints =>\r\n          " +
                    "  {\r\n                endpoints.MapControllers();\r\n            });\r\n\r\n           " +
                    " app.UseSwaggerUI(c =>\r\n            {\r\n                c.RoutePrefix = string.Em" +
                    "pty;\r\n                c.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"Template AP" +
                    "I\");\r\n            });\r\n        }\r\n\r\n        public void AddTransients(IServiceCo" +
                    "llection services)\r\n        {\r\n");
            
            #line 128 "C:\Users\ncustodio\source\repos\T4CodeGenerator\T4CodeGenerator.MSSQL2CSHARP\Templates\SQLSERVER\NETCORE\CSHARP\ApiStartupCS.tt"
 
    // Se repite por cada tabla en la base de datos
    foreach (string tableName in Configuration.PurgeExcludedClasses(Configuration.MSSQL.GetRepeatersTables())) 
    {    

            
            #line default
            #line hidden
            this.Write("            services.AddTransient<I");
            
            #line 133 "C:\Users\ncustodio\source\repos\T4CodeGenerator\T4CodeGenerator.MSSQL2CSHARP\Templates\SQLSERVER\NETCORE\CSHARP\ApiStartupCS.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write("Service, ");
            
            #line 133 "C:\Users\ncustodio\source\repos\T4CodeGenerator\T4CodeGenerator.MSSQL2CSHARP\Templates\SQLSERVER\NETCORE\CSHARP\ApiStartupCS.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(tableName));
            
            #line default
            #line hidden
            this.Write("Service>();\r\n");
            
            #line 134 "C:\Users\ncustodio\source\repos\T4CodeGenerator\T4CodeGenerator.MSSQL2CSHARP\Templates\SQLSERVER\NETCORE\CSHARP\ApiStartupCS.tt"
 
    }

            
            #line default
            #line hidden
            this.Write("   \r\n        }\r\n    }\r\n}\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class ApiStartupCSBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
